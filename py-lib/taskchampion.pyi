from typing import Optional
from enum import Enum


class Replica:
    def __init__(self, path: str, create_if_missing: bool): ...

    def new_task(self, status: "Status", description: str) -> "Task": ...

    def all_task_uuids(self) -> list[str]: ...

    def all_tasks(self) -> dict[str, "Task"]: ...

    def update_task(
        self, uuid: str, property: str, value: Optional[str]
    ) -> dict[str, str]: ...

    def working_set(self) -> "WorkingSet": ...

    def dependency_map(self, force: bool) -> "DependencyMap": ...

    def get_task(self, uuid: str) -> Optional["Task"]: ...

    def import_task_with_uuid(self, uuid: str) -> "Task": ...

    def sync(self): ...

    def rebuild_working_set(self, renumber: bool): ...

    def add_undo_point(self, force: bool) -> None: ...

    def num_local_operations(self) -> int: ...

    def num_undo_points(self) -> int: ...


class Status(Enum):
    Pending = 1
    Completed = 2
    Deleted = 3
    Recurring = 4
    Unknown = 5


class Task:
    def get_uuid(self) -> str: ...

    def get_status(self) -> "Status": ...

    def get_taskmap(self) -> dict[str, str]: ...

    def get_entry(self) -> Optional[str]: ...

    def get_priority(self) -> str: ...

    def get_wait(self) -> Optional[str]: ...

    def is_waiting(self) -> bool: ...

    def is_active(self) -> bool: ...

    def is_blocked(self) -> bool: ...

    def is_blocking(self) -> bool: ...

    def has_tag(self, tag: "Tag") -> bool: ...

    def get_tags(self) -> list["Tag"]: ...

    def get_annotations(self) -> list["Annotation"]: ...

    def get_uda(self, namespace: str, key: str) -> Optional[str]: ...

    def get_udas(self) -> list[tuple[tuple[str, str], str]]: ...

    def get_modified(self) -> Optional[str]: ...

    def get_due(self) -> Optional[str]: ...

    def get_dependencies(self) -> list[str]: ...

    def get_value(self, property: str) -> Optional[str]: ...


class WorkingSet:
    def __len__(self) -> int: ...

    def largest_index(self) -> int: ...

    def is_empty(self) -> bool: ...

    def by_index(self, index: int) -> Optional[str]: ...

    def by_uuid(self, uuid: str) -> Optional[int]: ...


class Annotation:
    entry: str
    description: str

    def __init__(self) -> None: ...


class DependencyMap:
    def dependencies(self, dep_of: str) -> list[str]: ...

    def dependents(self, dep_on: str) -> list[str]: ...


class Tag:
    def __init__(self, tag: str): ...
    def is_synthetic(self) -> bool: ...
    def is_user(self) -> bool: ...
